<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.presto.api.order.entity.ReturnBook">
    <resultMap type="com.presto.api.order.entity.ReturnBook" id="result"/>
    <sql id="select_all_cols">
        b_return_book.id,
        b_return_book.user_id as userId,
        b_return_book.order_id as orderId,
        b_return_book.status as status,
        b_return_book.delivery_com as deliveryCom,
        b_return_book.delivery_order_no as deliveryOrderNo,
        b_return_book.created_date as createdDate,
        b_return_book.updated_date as updatedDate,
        b_return_book.created_by as createdBy,
        b_return_book.updated_by as updatedBy,
        b_return_book.version
    </sql>
    <sql id="insert_all_cols">
        b_return_book.user_id,
        b_return_book.order_id,
        b_return_book.status,
        b_return_book.delivery_com,
        b_return_book.delivery_order_no,
        b_return_book.deleted_flag,
        b_return_book.created_date,
        b_return_book.updated_date,
        b_return_book.created_by,
        b_return_book.updated_by,
        b_return_book.version
    </sql>
    <sql id="where_all">
        WHERE b_return_book.deleted_flag = 0
        <if test="cond.id != null">
            AND b_return_book.id = #{cond.id}
        </if>
        <if test="cond.userId != null">
            AND b_return_book.user_id = #{cond.userId}
        </if>
        <if test="cond.orderId != null">
            AND b_return_book.order_id = #{cond.orderId}
        </if>
        <if test="cond.status != null">
            AND b_return_book.status = #{cond.status}
        </if>
        <if test="cond.statuss != null">
            AND b_return_book.status in
            <foreach item="item" index="index" collection="cond.statuss" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="cond.deliveryCom != null">
            AND b_return_book.delivery_com = #{cond.deliveryCom}
        </if>
        <if test="cond.deliveryOrderNo != null">
            AND b_return_book.delivery_order_no = #{cond.deliveryOrderNo}
        </if>
        <if test="cond.version != null">
            AND b_return_book.version = #{cond.version}
        </if>
        <if test="cond.ids != null">
            and b_return_book.id in
            <foreach item="item" index="index" collection="cond.ids" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="cond.createdDateB != null">
            <![CDATA[AND b_return_book.created_date >= #{cond.createdDateB}]]>
        </if>
        <if test="cond.createdDateE != null">
            <![CDATA[AND b_return_book.created_date <= #{cond.createdDateE}]]>
        </if>
        <if test="cond.updatedDateB != null">
            <![CDATA[AND b_return_book.updated_date >= #{cond.updatedDateB}]]>
        </if>
        <if test="cond.updatedDateE != null">
            <![CDATA[AND b_return_book.updated_date <= #{cond.updatedDateE}]]>
        </if>
    </sql>
    <select id="select" resultMap="result">
        select <include refid="select_all_cols"/>
        FROM b_return_book
        WHERE deleted_flag = 0 and b_return_book.id=#{id}
        <if test="lock">
            FOR UPDATE
        </if>
    </select>
    <select id="query" resultMap="result">
        select <include refid="select_all_cols"/>
        FROM b_return_book
        <include refid="where_all"/>
        <if test="start != null">
            order by b_return_book.created_date desc
            limit #{start},#{size}
        </if>
    </select>
    <select id="count" resultType="java.lang.Long">
        select count(0)
        FROM b_return_book
        <include refid="where_all"/>
    </select>
    <select id="sum" resultType="java.math.BigDecimal">
        select sum(${col})
        FROM b_return_book
        <include refid="where_all"/>
    </select>
    <insert id="insert" useGeneratedKeys="true" keyProperty="id" >
        INSERT INTO b_return_book(
            <include refid="insert_all_cols"/>
        ) VALUES (
        #{userId},
        #{orderId},
        #{status},
        #{deliveryCom},
        #{deliveryOrderNo},
        0,
        <if test="createdDate == null">
            current_timestamp(),
        </if>
        <if test="createdDate != null">
            #{createdDate},
        </if>
        current_timestamp(),
        #{createdBy},
        #{updatedBy},
        1
        )
    </insert>
    <insert id="insertSelective" useGeneratedKeys="true" keyProperty="id" >
        INSERT INTO b_return_book(
            <if test="userId != null">
                b_return_book.user_id,
            </if>
            <if test="orderId != null">
                b_return_book.order_id,
            </if>
            <if test="status != null">
                b_return_book.status,
            </if>
            <if test="deliveryCom != null">
                b_return_book.delivery_com,
            </if>
            <if test="deliveryOrderNo != null">
                b_return_book.delivery_order_no,
            </if>
            b_return_book.deleted_flag,
            b_return_book.created_date,
            b_return_book.updated_date,
            b_return_book.created_by,
            b_return_book.updated_by,
            b_return_book.version
        ) VALUES (
        <if test="userId != null">
            #{userId},
        </if>
        <if test="orderId != null">
            #{orderId},
        </if>
        <if test="status != null">
            #{status},
        </if>
        <if test="deliveryCom != null">
            #{deliveryCom},
        </if>
        <if test="deliveryOrderNo != null">
            #{deliveryOrderNo},
        </if>
        0,
        current_timestamp(),
        current_timestamp(),
        #{createdBy},
        #{updatedBy},
        1
        )
    </insert>
    <insert id="batchInsert">
        INSERT INTO b_return_book(
        <include refid="insert_all_cols" />
        ) VALUES
        <foreach item="item" index="index" collection="list" open="" separator="," close="">
            (
            #{item.userId},
            #{item.orderId},
            #{item.status},
            #{item.deliveryCom},
            #{item.deliveryOrderNo},
            0,
            current_timestamp(),
            current_timestamp(),
            #{item.createdBy},
            #{item.updatedBy},
            1
            )
        </foreach>
    </insert>
    <insert id="insertWithId">
        INSERT INTO b_return_book(id,<include refid="insert_all_cols"/>)
        VALUES
        (#{id},
        #{userId},
        #{orderId},
        #{status},
        #{deliveryCom},
        #{deliveryOrderNo},
        0,
        current_timestamp(),
        current_timestamp(),
        #{createdBy},
        #{updatedBy},
        1
        )
    </insert>
    <insert id="batchInsertWithId">
        INSERT INTO b_return_book(id,<include refid="insert_all_cols"/>)
        VALUES
        <foreach item="item" index="index" collection="list" open="" separator="," close="">
            (
            #{item.id},
            #{item.userId},
            #{item.orderId},
            #{item.status},
            #{item.deliveryCom},
            #{item.deliveryOrderNo},
            0,
            current_timestamp(),
            current_timestamp(),
            #{item.createdBy},
            #{item.updatedBy},
            1
            )
        </foreach>
    </insert>
    <update id="update">
        update b_return_book
        <set>
            user_id = #{userId},
            order_id = #{orderId},
            status = #{status},
            delivery_com = #{deliveryCom},
            delivery_order_no = #{deliveryOrderNo},
            version = version + 1,
            updated_date = current_timestamp(),
            updated_by=#{updatedBy}
        </set>
        where b_return_book.id = #{id}
    </update>
    <update id="updateSelective">
        update b_return_book
        <set>
            <if test="userId != null">
                user_id = #{userId},
            </if>
            <if test="orderId != null">
                order_id = #{orderId},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
            <if test="deliveryCom != null">
                delivery_com = #{deliveryCom},
            </if>
            <if test="deliveryOrderNo != null">
                delivery_order_no = #{deliveryOrderNo},
            </if>
            version = version + 1,
            updated_date = current_timestamp(),
            updated_by=#{updatedBy}
        </set>
        where b_return_book.id = #{id}
    </update>
    <delete id="delete">
        update b_return_book set deleted_flag = 1
        <include refid="where_all"/>
    </delete>
    <delete id="deleteById">
        update b_return_book set deleted_flag = 1 where b_return_book.id = #{id}
    </delete>
    <delete id="deleteCompletely">
        delete from b_return_book
        <include refid="where_all"/>
    </delete>
    <delete id="deleteByIdCompletely">
        delete from b_return_book where b_return_book.id = #{id}
    </delete>
</mapper>
